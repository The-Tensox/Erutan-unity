// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/erutan.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Erutan {

  /// <summary>Holder for reflection information generated from protobuf/erutan.proto</summary>
  public static partial class ErutanReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/erutan.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ErutanReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90b2J1Zi9lcnV0YW4ucHJvdG8SBmVydXRhbhofZ29vZ2xlL3Byb3Rv",
            "YnVmL3RpbWVzdGFtcC5wcm90bxohcHJvdG9idWYvcHJvdG9tZXRyeS92ZWN0",
            "b3IzLnByb3RvGiRwcm90b2J1Zi9wcm90b21ldHJ5L3F1YXRlcm5pb24ucHJv",
            "dG8aIHByb3RvYnVmL3Byb3RvbWV0cnkvdm9sdW1lLnByb3RvIjkKCE1ldGFk",
            "YXRhEi0KCXRpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXAioQkKCUNvbXBvbmVudBIxCgVzcGFjZRgBIAEoCzIgLmVydXRhbi5D",
            "b21wb25lbnQuU3BhY2VDb21wb25lbnRIABIzCgZoZWFsdGgYAiABKAsyIS5l",
            "cnV0YW4uQ29tcG9uZW50LkhlYWx0aENvbXBvbmVudEgAEjEKBXNwZWVkGAMg",
            "ASgLMiAuZXJ1dGFuLkNvbXBvbmVudC5TcGVlZENvbXBvbmVudEgAEjMKBnJl",
            "bmRlchgEIAEoCzIhLmVydXRhbi5Db21wb25lbnQuUmVuZGVyQ29tcG9uZW50",
            "SAASQgoOYmVoYXZpb3VyX3R5cGUYBSABKAsyKC5lcnV0YW4uQ29tcG9uZW50",
            "LkJlaGF2aW91clR5cGVDb21wb25lbnRIABI1CgdwaHlzaWNzGAYgASgLMiIu",
            "ZXJ1dGFuLkNvbXBvbmVudC5QaHlzaWNzQ29tcG9uZW50SAASSAoRbmV0d29y",
            "a19iZWhhdmlvdXIYByABKAsyKy5lcnV0YW4uQ29tcG9uZW50Lk5ldHdvcmtC",
            "ZWhhdmlvdXJDb21wb25lbnRIABqFAQoOU3BhY2VDb21wb25lbnQSJQoIcG9z",
            "aXRpb24YASABKAsyEy5wcm90b21ldHJ5LlZlY3RvcjMSKAoIcm90YXRpb24Y",
            "AiABKAsyFi5wcm90b21ldHJ5LlF1YXRlcm5pb24SIgoFc2NhbGUYAyABKAsy",
            "Ey5wcm90b21ldHJ5LlZlY3RvcjMaHwoPSGVhbHRoQ29tcG9uZW50EgwKBGxp",
            "ZmUYASABKAEaJAoOU3BlZWRDb21wb25lbnQSEgoKbW92ZV9zcGVlZBgBIAEo",
            "ARo2Cg9UYXJnZXRDb21wb25lbnQSIwoGdGFyZ2V0GAEgASgLMhMucHJvdG9t",
            "ZXRyeS5WZWN0b3IzGqwBCg9SZW5kZXJDb21wb25lbnQSHgoEbWVzaBgBIAEo",
            "CzIQLnByb3RvbWV0cnkuTWVzaBI3CgZjb2xvcnMYAiADKAsyJy5lcnV0YW4u",
            "Q29tcG9uZW50LlJlbmRlckNvbXBvbmVudC5Db2xvchpACgVDb2xvchILCgNy",
            "ZWQYASABKAISDQoFZ3JlZW4YAiABKAISDAoEYmx1ZRgDIAEoAhINCgVhbHBo",
            "YRgEIAEoAhqLAQoWQmVoYXZpb3VyVHlwZUNvbXBvbmVudBI5CgN0YWcYASAB",
            "KA4yLC5lcnV0YW4uQ29tcG9uZW50LkJlaGF2aW91clR5cGVDb21wb25lbnQu",
            "VGFnIjYKA1RhZxIHCgNBTlkQABIKCgZBTklNQUwQARIOCgpWRUdFVEFUSU9O",
            "EAISCgoGUExBWUVSEAMaJwoQUGh5c2ljc0NvbXBvbmVudBITCgt1c2VfZ3Jh",
            "dml0eRgBIAEoCBqJAQoZTmV0d29ya0JlaGF2aW91ckNvbXBvbmVudBI8CgN0",
            "YWcYASABKA4yLy5lcnV0YW4uQ29tcG9uZW50Lk5ldHdvcmtCZWhhdmlvdXJD",
            "b21wb25lbnQuVGFnEhMKC293bmVyX3Rva2VuGAIgASgJIhkKA1RhZxIHCgNB",
            "TEwQABIJCgVERUJVRxABQgYKBHR5cGUioQsKBlBhY2tldBIiCghtZXRhZGF0",
            "YRgBIAEoCzIQLmVydXRhbi5NZXRhZGF0YRI6Cg11cGRhdGVfb2JqZWN0GAIg",
            "ASgLMiEuZXJ1dGFuLlBhY2tldC5VcGRhdGVPYmplY3RQYWNrZXRIABI+Cg91",
            "cGRhdGVfcG9zaXRpb24YAyABKAsyIy5lcnV0YW4uUGFja2V0LlVwZGF0ZVBv",
            "c2l0aW9uUGFja2V0SAASPgoPdXBkYXRlX3JvdGF0aW9uGAQgASgLMiMuZXJ1",
            "dGFuLlBhY2tldC5VcGRhdGVSb3RhdGlvblBhY2tldEgAEjwKDmRlc3Ryb3lf",
            "b2JqZWN0GAUgASgLMiIuZXJ1dGFuLlBhY2tldC5EZXN0cm95T2JqZWN0UGFj",
            "a2V0SAASQgoRdXBkYXRlX3BhcmFtZXRlcnMYBiABKAsyJS5lcnV0YW4uUGFj",
            "a2V0LlVwZGF0ZVBhcmFtZXRlcnNQYWNrZXRIABI1Cgphcm1hZ2VkZG9uGAcg",
            "ASgLMh8uZXJ1dGFuLlBhY2tldC5Bcm1hZ2VkZG9uUGFja2V0SAASPQoOYXV0",
            "aGVudGljYXRpb24YCCABKAsyIy5lcnV0YW4uUGFja2V0LkF1dGhlbnRpY2F0",
            "aW9uUGFja2V0SAASOgoNY3JlYXRlX3BsYXllchgJIAEoCzIhLmVydXRhbi5Q",
            "YWNrZXQuQ3JlYXRlUGxheWVyUGFja2V0SAASRwoUdXBkYXRlX3NwYWNlX3Jl",
            "cXVlc3QYCiABKAsyJy5lcnV0YW4uUGFja2V0LlVwZGF0ZVNwYWNlUmVxdWVz",
            "dFBhY2tldEgAGk4KElVwZGF0ZU9iamVjdFBhY2tldBIRCglvYmplY3RfaWQY",
            "ASABKAQSJQoKY29tcG9uZW50cxgCIAMoCzIRLmVydXRhbi5Db21wb25lbnQa",
            "UAoUVXBkYXRlUG9zaXRpb25QYWNrZXQSEQoJb2JqZWN0X2lkGAEgASgEEiUK",
            "CHBvc2l0aW9uGAIgASgLMhMucHJvdG9tZXRyeS5WZWN0b3IzGlMKFFVwZGF0",
            "ZVJvdGF0aW9uUGFja2V0EhEKCW9iamVjdF9pZBgBIAEoBBIoCghyb3RhdGlv",
            "bhgCIAEoCzIWLnByb3RvbWV0cnkuUXVhdGVybmlvbhpJChNEZXN0cm95T2Jq",
            "ZWN0UGFja2V0EhEKCW9iamVjdF9pZBgBIAEoBBIfCgZyZWdpb24YAiABKAsy",
            "Dy5wcm90b21ldHJ5LkJveBrCAQoWVXBkYXRlUGFyYW1ldGVyc1BhY2tldBJD",
            "CgpwYXJhbWV0ZXJzGAEgAygLMi8uZXJ1dGFuLlBhY2tldC5VcGRhdGVQYXJh",
            "bWV0ZXJzUGFja2V0LlBhcmFtZXRlchpjCglQYXJhbWV0ZXISFAoKdGltZV9z",
            "Y2FsZRgBIAEoAUgAEg8KBWRlYnVnGAIgASgISAASJwoMY3VsbGluZ19hcmVh",
            "GAMgASgLMg8ucHJvdG9tZXRyeS5Cb3hIAEIGCgR0eXBlGhIKEEFybWFnZWRk",
            "b25QYWNrZXQaLAoUQXV0aGVudGljYXRpb25QYWNrZXQSFAoMY2xpZW50X3Rv",
            "a2VuGAEgASgJGk4KEkNyZWF0ZVBsYXllclBhY2tldBIRCglvYmplY3RfaWQY",
            "ASABKAQSJQoKY29tcG9uZW50cxgCIAMoCzIRLmVydXRhbi5Db21wb25lbnQa",
            "mAEKGFVwZGF0ZVNwYWNlUmVxdWVzdFBhY2tldBIRCglvYmplY3RfaWQYASAB",
            "KAQSNQoLYWN0dWFsU3BhY2UYAiABKAsyIC5lcnV0YW4uQ29tcG9uZW50LlNw",
            "YWNlQ29tcG9uZW50EjIKCG5ld1NwYWNlGAMgASgLMiAuZXJ1dGFuLkNvbXBv",
            "bmVudC5TcGFjZUNvbXBvbmVudEIGCgR0eXBlMjgKBkVydXRhbhIuCgZTdHJl",
            "YW0SDi5lcnV0YW4uUGFja2V0Gg4uZXJ1dGFuLlBhY2tldCIAKAEwAUInWhxn",
            "aXRodWIuY29tL1RoZS1UZW5zb3gvZXJ1dGFuqgIGRXJ1dGFuYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Protometry.Vector3Reflection.Descriptor, global::Protometry.QuaternionReflection.Descriptor, global::Protometry.VolumeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Metadata), global::Erutan.Metadata.Parser, new[]{ "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component), global::Erutan.Component.Parser, new[]{ "Space", "Health", "Speed", "Render", "BehaviourType", "Physics", "NetworkBehaviour" }, new[]{ "Type" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.SpaceComponent), global::Erutan.Component.Types.SpaceComponent.Parser, new[]{ "Position", "Rotation", "Scale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.HealthComponent), global::Erutan.Component.Types.HealthComponent.Parser, new[]{ "Life" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.SpeedComponent), global::Erutan.Component.Types.SpeedComponent.Parser, new[]{ "MoveSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.TargetComponent), global::Erutan.Component.Types.TargetComponent.Parser, new[]{ "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.RenderComponent), global::Erutan.Component.Types.RenderComponent.Parser, new[]{ "Mesh", "Colors" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.RenderComponent.Types.Color), global::Erutan.Component.Types.RenderComponent.Types.Color.Parser, new[]{ "Red", "Green", "Blue", "Alpha" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.BehaviourTypeComponent), global::Erutan.Component.Types.BehaviourTypeComponent.Parser, new[]{ "Tag" }, null, new[]{ typeof(global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.PhysicsComponent), global::Erutan.Component.Types.PhysicsComponent.Parser, new[]{ "UseGravity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Component.Types.NetworkBehaviourComponent), global::Erutan.Component.Types.NetworkBehaviourComponent.Parser, new[]{ "Tag", "OwnerToken" }, null, new[]{ typeof(global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet), global::Erutan.Packet.Parser, new[]{ "Metadata", "UpdateObject", "UpdatePosition", "UpdateRotation", "DestroyObject", "UpdateParameters", "Armageddon", "Authentication", "CreatePlayer", "UpdateSpaceRequest" }, new[]{ "Type" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.UpdateObjectPacket), global::Erutan.Packet.Types.UpdateObjectPacket.Parser, new[]{ "ObjectId", "Components" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.UpdatePositionPacket), global::Erutan.Packet.Types.UpdatePositionPacket.Parser, new[]{ "ObjectId", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.UpdateRotationPacket), global::Erutan.Packet.Types.UpdateRotationPacket.Parser, new[]{ "ObjectId", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.DestroyObjectPacket), global::Erutan.Packet.Types.DestroyObjectPacket.Parser, new[]{ "ObjectId", "Region" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.UpdateParametersPacket), global::Erutan.Packet.Types.UpdateParametersPacket.Parser, new[]{ "Parameters" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter), global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter.Parser, new[]{ "TimeScale", "Debug", "CullingArea" }, new[]{ "Type" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.ArmageddonPacket), global::Erutan.Packet.Types.ArmageddonPacket.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.AuthenticationPacket), global::Erutan.Packet.Types.AuthenticationPacket.Parser, new[]{ "ClientToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.CreatePlayerPacket), global::Erutan.Packet.Types.CreatePlayerPacket.Parser, new[]{ "ObjectId", "Components" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Erutan.Packet.Types.UpdateSpaceRequestPacket), global::Erutan.Packet.Types.UpdateSpaceRequestPacket.Parser, new[]{ "ObjectId", "ActualSpace", "NewSpace" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Erutan.ErutanReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data-oriented design : Object (=Object here) Component System (ECS)
  /// </summary>
  public sealed partial class Component : pb::IMessage<Component> {
    private static readonly pb::MessageParser<Component> _parser = new pb::MessageParser<Component>(() => new Component());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Component> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Erutan.ErutanReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component(Component other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Space:
          Space = other.Space.Clone();
          break;
        case TypeOneofCase.Health:
          Health = other.Health.Clone();
          break;
        case TypeOneofCase.Speed:
          Speed = other.Speed.Clone();
          break;
        case TypeOneofCase.Render:
          Render = other.Render.Clone();
          break;
        case TypeOneofCase.BehaviourType:
          BehaviourType = other.BehaviourType.Clone();
          break;
        case TypeOneofCase.Physics:
          Physics = other.Physics.Clone();
          break;
        case TypeOneofCase.NetworkBehaviour:
          NetworkBehaviour = other.NetworkBehaviour.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component Clone() {
      return new Component(this);
    }

    /// <summary>Field number for the "space" field.</summary>
    public const int SpaceFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.SpaceComponent Space {
      get { return typeCase_ == TypeOneofCase.Space ? (global::Erutan.Component.Types.SpaceComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Space;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.HealthComponent Health {
      get { return typeCase_ == TypeOneofCase.Health ? (global::Erutan.Component.Types.HealthComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Health;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.SpeedComponent Speed {
      get { return typeCase_ == TypeOneofCase.Speed ? (global::Erutan.Component.Types.SpeedComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Speed;
      }
    }

    /// <summary>Field number for the "render" field.</summary>
    public const int RenderFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.RenderComponent Render {
      get { return typeCase_ == TypeOneofCase.Render ? (global::Erutan.Component.Types.RenderComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Render;
      }
    }

    /// <summary>Field number for the "behaviour_type" field.</summary>
    public const int BehaviourTypeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.BehaviourTypeComponent BehaviourType {
      get { return typeCase_ == TypeOneofCase.BehaviourType ? (global::Erutan.Component.Types.BehaviourTypeComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BehaviourType;
      }
    }

    /// <summary>Field number for the "physics" field.</summary>
    public const int PhysicsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.PhysicsComponent Physics {
      get { return typeCase_ == TypeOneofCase.Physics ? (global::Erutan.Component.Types.PhysicsComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Physics;
      }
    }

    /// <summary>Field number for the "network_behaviour" field.</summary>
    public const int NetworkBehaviourFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Component.Types.NetworkBehaviourComponent NetworkBehaviour {
      get { return typeCase_ == TypeOneofCase.NetworkBehaviour ? (global::Erutan.Component.Types.NetworkBehaviourComponent) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NetworkBehaviour;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Space = 1,
      Health = 2,
      Speed = 3,
      Render = 4,
      BehaviourType = 5,
      Physics = 6,
      NetworkBehaviour = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Component);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Component other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Space, other.Space)) return false;
      if (!object.Equals(Health, other.Health)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Render, other.Render)) return false;
      if (!object.Equals(BehaviourType, other.BehaviourType)) return false;
      if (!object.Equals(Physics, other.Physics)) return false;
      if (!object.Equals(NetworkBehaviour, other.NetworkBehaviour)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Space) hash ^= Space.GetHashCode();
      if (typeCase_ == TypeOneofCase.Health) hash ^= Health.GetHashCode();
      if (typeCase_ == TypeOneofCase.Speed) hash ^= Speed.GetHashCode();
      if (typeCase_ == TypeOneofCase.Render) hash ^= Render.GetHashCode();
      if (typeCase_ == TypeOneofCase.BehaviourType) hash ^= BehaviourType.GetHashCode();
      if (typeCase_ == TypeOneofCase.Physics) hash ^= Physics.GetHashCode();
      if (typeCase_ == TypeOneofCase.NetworkBehaviour) hash ^= NetworkBehaviour.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Space) {
        output.WriteRawTag(10);
        output.WriteMessage(Space);
      }
      if (typeCase_ == TypeOneofCase.Health) {
        output.WriteRawTag(18);
        output.WriteMessage(Health);
      }
      if (typeCase_ == TypeOneofCase.Speed) {
        output.WriteRawTag(26);
        output.WriteMessage(Speed);
      }
      if (typeCase_ == TypeOneofCase.Render) {
        output.WriteRawTag(34);
        output.WriteMessage(Render);
      }
      if (typeCase_ == TypeOneofCase.BehaviourType) {
        output.WriteRawTag(42);
        output.WriteMessage(BehaviourType);
      }
      if (typeCase_ == TypeOneofCase.Physics) {
        output.WriteRawTag(50);
        output.WriteMessage(Physics);
      }
      if (typeCase_ == TypeOneofCase.NetworkBehaviour) {
        output.WriteRawTag(58);
        output.WriteMessage(NetworkBehaviour);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Space) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Space);
      }
      if (typeCase_ == TypeOneofCase.Health) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Health);
      }
      if (typeCase_ == TypeOneofCase.Speed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (typeCase_ == TypeOneofCase.Render) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Render);
      }
      if (typeCase_ == TypeOneofCase.BehaviourType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BehaviourType);
      }
      if (typeCase_ == TypeOneofCase.Physics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Physics);
      }
      if (typeCase_ == TypeOneofCase.NetworkBehaviour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkBehaviour);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Component other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Space:
          if (Space == null) {
            Space = new global::Erutan.Component.Types.SpaceComponent();
          }
          Space.MergeFrom(other.Space);
          break;
        case TypeOneofCase.Health:
          if (Health == null) {
            Health = new global::Erutan.Component.Types.HealthComponent();
          }
          Health.MergeFrom(other.Health);
          break;
        case TypeOneofCase.Speed:
          if (Speed == null) {
            Speed = new global::Erutan.Component.Types.SpeedComponent();
          }
          Speed.MergeFrom(other.Speed);
          break;
        case TypeOneofCase.Render:
          if (Render == null) {
            Render = new global::Erutan.Component.Types.RenderComponent();
          }
          Render.MergeFrom(other.Render);
          break;
        case TypeOneofCase.BehaviourType:
          if (BehaviourType == null) {
            BehaviourType = new global::Erutan.Component.Types.BehaviourTypeComponent();
          }
          BehaviourType.MergeFrom(other.BehaviourType);
          break;
        case TypeOneofCase.Physics:
          if (Physics == null) {
            Physics = new global::Erutan.Component.Types.PhysicsComponent();
          }
          Physics.MergeFrom(other.Physics);
          break;
        case TypeOneofCase.NetworkBehaviour:
          if (NetworkBehaviour == null) {
            NetworkBehaviour = new global::Erutan.Component.Types.NetworkBehaviourComponent();
          }
          NetworkBehaviour.MergeFrom(other.NetworkBehaviour);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Erutan.Component.Types.SpaceComponent subBuilder = new global::Erutan.Component.Types.SpaceComponent();
            if (typeCase_ == TypeOneofCase.Space) {
              subBuilder.MergeFrom(Space);
            }
            input.ReadMessage(subBuilder);
            Space = subBuilder;
            break;
          }
          case 18: {
            global::Erutan.Component.Types.HealthComponent subBuilder = new global::Erutan.Component.Types.HealthComponent();
            if (typeCase_ == TypeOneofCase.Health) {
              subBuilder.MergeFrom(Health);
            }
            input.ReadMessage(subBuilder);
            Health = subBuilder;
            break;
          }
          case 26: {
            global::Erutan.Component.Types.SpeedComponent subBuilder = new global::Erutan.Component.Types.SpeedComponent();
            if (typeCase_ == TypeOneofCase.Speed) {
              subBuilder.MergeFrom(Speed);
            }
            input.ReadMessage(subBuilder);
            Speed = subBuilder;
            break;
          }
          case 34: {
            global::Erutan.Component.Types.RenderComponent subBuilder = new global::Erutan.Component.Types.RenderComponent();
            if (typeCase_ == TypeOneofCase.Render) {
              subBuilder.MergeFrom(Render);
            }
            input.ReadMessage(subBuilder);
            Render = subBuilder;
            break;
          }
          case 42: {
            global::Erutan.Component.Types.BehaviourTypeComponent subBuilder = new global::Erutan.Component.Types.BehaviourTypeComponent();
            if (typeCase_ == TypeOneofCase.BehaviourType) {
              subBuilder.MergeFrom(BehaviourType);
            }
            input.ReadMessage(subBuilder);
            BehaviourType = subBuilder;
            break;
          }
          case 50: {
            global::Erutan.Component.Types.PhysicsComponent subBuilder = new global::Erutan.Component.Types.PhysicsComponent();
            if (typeCase_ == TypeOneofCase.Physics) {
              subBuilder.MergeFrom(Physics);
            }
            input.ReadMessage(subBuilder);
            Physics = subBuilder;
            break;
          }
          case 58: {
            global::Erutan.Component.Types.NetworkBehaviourComponent subBuilder = new global::Erutan.Component.Types.NetworkBehaviourComponent();
            if (typeCase_ == TypeOneofCase.NetworkBehaviour) {
              subBuilder.MergeFrom(NetworkBehaviour);
            }
            input.ReadMessage(subBuilder);
            NetworkBehaviour = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Component message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SpaceComponent : pb::IMessage<SpaceComponent> {
        private static readonly pb::MessageParser<SpaceComponent> _parser = new pb::MessageParser<SpaceComponent>(() => new SpaceComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpaceComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpaceComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpaceComponent(SpaceComponent other) : this() {
          position_ = other.position_ != null ? other.position_.Clone() : null;
          rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
          scale_ = other.scale_ != null ? other.scale_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpaceComponent Clone() {
          return new SpaceComponent(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 1;
        private global::Protometry.Vector3 position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Vector3 Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 2;
        private global::Protometry.Quaternion rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Quaternion Rotation {
          get { return rotation_; }
          set {
            rotation_ = value;
          }
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 3;
        private global::Protometry.Vector3 scale_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Vector3 Scale {
          get { return scale_; }
          set {
            scale_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpaceComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpaceComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Position, other.Position)) return false;
          if (!object.Equals(Rotation, other.Rotation)) return false;
          if (!object.Equals(Scale, other.Scale)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (position_ != null) hash ^= Position.GetHashCode();
          if (rotation_ != null) hash ^= Rotation.GetHashCode();
          if (scale_ != null) hash ^= Scale.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (position_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Position);
          }
          if (rotation_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Rotation);
          }
          if (scale_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Scale);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (rotation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
          }
          if (scale_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpaceComponent other) {
          if (other == null) {
            return;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              Position = new global::Protometry.Vector3();
            }
            Position.MergeFrom(other.Position);
          }
          if (other.rotation_ != null) {
            if (rotation_ == null) {
              Rotation = new global::Protometry.Quaternion();
            }
            Rotation.MergeFrom(other.Rotation);
          }
          if (other.scale_ != null) {
            if (scale_ == null) {
              Scale = new global::Protometry.Vector3();
            }
            Scale.MergeFrom(other.Scale);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (position_ == null) {
                  Position = new global::Protometry.Vector3();
                }
                input.ReadMessage(Position);
                break;
              }
              case 18: {
                if (rotation_ == null) {
                  Rotation = new global::Protometry.Quaternion();
                }
                input.ReadMessage(Rotation);
                break;
              }
              case 26: {
                if (scale_ == null) {
                  Scale = new global::Protometry.Vector3();
                }
                input.ReadMessage(Scale);
                break;
              }
            }
          }
        }

      }

      public sealed partial class HealthComponent : pb::IMessage<HealthComponent> {
        private static readonly pb::MessageParser<HealthComponent> _parser = new pb::MessageParser<HealthComponent>(() => new HealthComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HealthComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HealthComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HealthComponent(HealthComponent other) : this() {
          life_ = other.life_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HealthComponent Clone() {
          return new HealthComponent(this);
        }

        /// <summary>Field number for the "life" field.</summary>
        public const int LifeFieldNumber = 1;
        private double life_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Life {
          get { return life_; }
          set {
            life_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HealthComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HealthComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Life, other.Life)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Life != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Life);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Life != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Life);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Life != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HealthComponent other) {
          if (other == null) {
            return;
          }
          if (other.Life != 0D) {
            Life = other.Life;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Life = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SpeedComponent : pb::IMessage<SpeedComponent> {
        private static readonly pb::MessageParser<SpeedComponent> _parser = new pb::MessageParser<SpeedComponent>(() => new SpeedComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpeedComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeedComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeedComponent(SpeedComponent other) : this() {
          moveSpeed_ = other.moveSpeed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeedComponent Clone() {
          return new SpeedComponent(this);
        }

        /// <summary>Field number for the "move_speed" field.</summary>
        public const int MoveSpeedFieldNumber = 1;
        private double moveSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MoveSpeed {
          get { return moveSpeed_; }
          set {
            moveSpeed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpeedComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpeedComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoveSpeed, other.MoveSpeed)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MoveSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoveSpeed);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MoveSpeed != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(MoveSpeed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MoveSpeed != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpeedComponent other) {
          if (other == null) {
            return;
          }
          if (other.MoveSpeed != 0D) {
            MoveSpeed = other.MoveSpeed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                MoveSpeed = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TargetComponent : pb::IMessage<TargetComponent> {
        private static readonly pb::MessageParser<TargetComponent> _parser = new pb::MessageParser<TargetComponent>(() => new TargetComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TargetComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetComponent(TargetComponent other) : this() {
          target_ = other.target_ != null ? other.target_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetComponent Clone() {
          return new TargetComponent(this);
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 1;
        private global::Protometry.Vector3 target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Vector3 Target {
          get { return target_; }
          set {
            target_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TargetComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TargetComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Target, other.Target)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (target_ != null) hash ^= Target.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (target_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Target);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (target_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TargetComponent other) {
          if (other == null) {
            return;
          }
          if (other.target_ != null) {
            if (target_ == null) {
              Target = new global::Protometry.Vector3();
            }
            Target.MergeFrom(other.Target);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (target_ == null) {
                  Target = new global::Protometry.Vector3();
                }
                input.ReadMessage(Target);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RenderComponent : pb::IMessage<RenderComponent> {
        private static readonly pb::MessageParser<RenderComponent> _parser = new pb::MessageParser<RenderComponent>(() => new RenderComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RenderComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RenderComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RenderComponent(RenderComponent other) : this() {
          mesh_ = other.mesh_ != null ? other.mesh_.Clone() : null;
          colors_ = other.colors_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RenderComponent Clone() {
          return new RenderComponent(this);
        }

        /// <summary>Field number for the "mesh" field.</summary>
        public const int MeshFieldNumber = 1;
        private global::Protometry.Mesh mesh_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Mesh Mesh {
          get { return mesh_; }
          set {
            mesh_ = value;
          }
        }

        /// <summary>Field number for the "colors" field.</summary>
        public const int ColorsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Erutan.Component.Types.RenderComponent.Types.Color> _repeated_colors_codec
            = pb::FieldCodec.ForMessage(18, global::Erutan.Component.Types.RenderComponent.Types.Color.Parser);
        private readonly pbc::RepeatedField<global::Erutan.Component.Types.RenderComponent.Types.Color> colors_ = new pbc::RepeatedField<global::Erutan.Component.Types.RenderComponent.Types.Color>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Erutan.Component.Types.RenderComponent.Types.Color> Colors {
          get { return colors_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RenderComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RenderComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Mesh, other.Mesh)) return false;
          if(!colors_.Equals(other.colors_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (mesh_ != null) hash ^= Mesh.GetHashCode();
          hash ^= colors_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (mesh_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Mesh);
          }
          colors_.WriteTo(output, _repeated_colors_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (mesh_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
          }
          size += colors_.CalculateSize(_repeated_colors_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RenderComponent other) {
          if (other == null) {
            return;
          }
          if (other.mesh_ != null) {
            if (mesh_ == null) {
              Mesh = new global::Protometry.Mesh();
            }
            Mesh.MergeFrom(other.Mesh);
          }
          colors_.Add(other.colors_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (mesh_ == null) {
                  Mesh = new global::Protometry.Mesh();
                }
                input.ReadMessage(Mesh);
                break;
              }
              case 18: {
                colors_.AddEntriesFrom(input, _repeated_colors_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the RenderComponent message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Color : pb::IMessage<Color> {
            private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Color> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Erutan.Component.Types.RenderComponent.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Color() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Color(Color other) : this() {
              red_ = other.red_;
              green_ = other.green_;
              blue_ = other.blue_;
              alpha_ = other.alpha_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Color Clone() {
              return new Color(this);
            }

            /// <summary>Field number for the "red" field.</summary>
            public const int RedFieldNumber = 1;
            private float red_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Red {
              get { return red_; }
              set {
                red_ = value;
              }
            }

            /// <summary>Field number for the "green" field.</summary>
            public const int GreenFieldNumber = 2;
            private float green_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Green {
              get { return green_; }
              set {
                green_ = value;
              }
            }

            /// <summary>Field number for the "blue" field.</summary>
            public const int BlueFieldNumber = 3;
            private float blue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Blue {
              get { return blue_; }
              set {
                blue_ = value;
              }
            }

            /// <summary>Field number for the "alpha" field.</summary>
            public const int AlphaFieldNumber = 4;
            private float alpha_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Alpha {
              get { return alpha_; }
              set {
                alpha_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Color);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Color other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Red, other.Red)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Green, other.Green)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Blue, other.Blue)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Red != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Red);
              if (Green != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Green);
              if (Blue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Blue);
              if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Red != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(Red);
              }
              if (Green != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Green);
              }
              if (Blue != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Blue);
              }
              if (Alpha != 0F) {
                output.WriteRawTag(37);
                output.WriteFloat(Alpha);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Red != 0F) {
                size += 1 + 4;
              }
              if (Green != 0F) {
                size += 1 + 4;
              }
              if (Blue != 0F) {
                size += 1 + 4;
              }
              if (Alpha != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Color other) {
              if (other == null) {
                return;
              }
              if (other.Red != 0F) {
                Red = other.Red;
              }
              if (other.Green != 0F) {
                Green = other.Green;
              }
              if (other.Blue != 0F) {
                Blue = other.Blue;
              }
              if (other.Alpha != 0F) {
                Alpha = other.Alpha;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    Red = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Green = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    Blue = input.ReadFloat();
                    break;
                  }
                  case 37: {
                    Alpha = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Acts as a sort of tag
      /// </summary>
      public sealed partial class BehaviourTypeComponent : pb::IMessage<BehaviourTypeComponent> {
        private static readonly pb::MessageParser<BehaviourTypeComponent> _parser = new pb::MessageParser<BehaviourTypeComponent>(() => new BehaviourTypeComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BehaviourTypeComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BehaviourTypeComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BehaviourTypeComponent(BehaviourTypeComponent other) : this() {
          tag_ = other.tag_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BehaviourTypeComponent Clone() {
          return new BehaviourTypeComponent(this);
        }

        /// <summary>Field number for the "tag" field.</summary>
        public const int TagFieldNumber = 1;
        private global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag tag_ = global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag.Any;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag Tag {
          get { return tag_; }
          set {
            tag_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BehaviourTypeComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BehaviourTypeComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Tag != other.Tag) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Tag != global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag.Any) hash ^= Tag.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Tag != global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag.Any) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Tag);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Tag != global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag.Any) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tag);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BehaviourTypeComponent other) {
          if (other == null) {
            return;
          }
          if (other.Tag != global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag.Any) {
            Tag = other.Tag;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Tag = (global::Erutan.Component.Types.BehaviourTypeComponent.Types.Tag) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BehaviourTypeComponent message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Tag {
            [pbr::OriginalName("ANY")] Any = 0,
            [pbr::OriginalName("ANIMAL")] Animal = 1,
            [pbr::OriginalName("VEGETATION")] Vegetation = 2,
            [pbr::OriginalName("PLAYER")] Player = 3,
          }

        }
        #endregion

      }

      public sealed partial class PhysicsComponent : pb::IMessage<PhysicsComponent> {
        private static readonly pb::MessageParser<PhysicsComponent> _parser = new pb::MessageParser<PhysicsComponent>(() => new PhysicsComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PhysicsComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PhysicsComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PhysicsComponent(PhysicsComponent other) : this() {
          useGravity_ = other.useGravity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PhysicsComponent Clone() {
          return new PhysicsComponent(this);
        }

        /// <summary>Field number for the "use_gravity" field.</summary>
        public const int UseGravityFieldNumber = 1;
        private bool useGravity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UseGravity {
          get { return useGravity_; }
          set {
            useGravity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PhysicsComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PhysicsComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UseGravity != other.UseGravity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UseGravity != false) hash ^= UseGravity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UseGravity != false) {
            output.WriteRawTag(8);
            output.WriteBool(UseGravity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UseGravity != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PhysicsComponent other) {
          if (other == null) {
            return;
          }
          if (other.UseGravity != false) {
            UseGravity = other.UseGravity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                UseGravity = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Some information about how this object should be synchronized
      /// </summary>
      public sealed partial class NetworkBehaviourComponent : pb::IMessage<NetworkBehaviourComponent> {
        private static readonly pb::MessageParser<NetworkBehaviourComponent> _parser = new pb::MessageParser<NetworkBehaviourComponent>(() => new NetworkBehaviourComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NetworkBehaviourComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Component.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetworkBehaviourComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetworkBehaviourComponent(NetworkBehaviourComponent other) : this() {
          tag_ = other.tag_;
          ownerToken_ = other.ownerToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetworkBehaviourComponent Clone() {
          return new NetworkBehaviourComponent(this);
        }

        /// <summary>Field number for the "tag" field.</summary>
        public const int TagFieldNumber = 1;
        private global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag tag_ = global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag.All;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag Tag {
          get { return tag_; }
          set {
            tag_ = value;
          }
        }

        /// <summary>Field number for the "owner_token" field.</summary>
        public const int OwnerTokenFieldNumber = 2;
        private string ownerToken_ = "";
        /// <summary>
        /// Useful to define who [is allowed] to control x object ...
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OwnerToken {
          get { return ownerToken_; }
          set {
            ownerToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NetworkBehaviourComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NetworkBehaviourComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Tag != other.Tag) return false;
          if (OwnerToken != other.OwnerToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Tag != global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag.All) hash ^= Tag.GetHashCode();
          if (OwnerToken.Length != 0) hash ^= OwnerToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Tag != global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag.All) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Tag);
          }
          if (OwnerToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(OwnerToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Tag != global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag.All) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tag);
          }
          if (OwnerToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NetworkBehaviourComponent other) {
          if (other == null) {
            return;
          }
          if (other.Tag != global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag.All) {
            Tag = other.Tag;
          }
          if (other.OwnerToken.Length != 0) {
            OwnerToken = other.OwnerToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Tag = (global::Erutan.Component.Types.NetworkBehaviourComponent.Types.Tag) input.ReadEnum();
                break;
              }
              case 18: {
                OwnerToken = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the NetworkBehaviourComponent message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Some kind of filter, should an object be considered debug thing or normal or hack mode: show only clients :p
          /// </summary>
          public enum Tag {
            [pbr::OriginalName("ALL")] All = 0,
            [pbr::OriginalName("DEBUG")] Debug = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Erutan.ErutanReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.UpdateObject:
          UpdateObject = other.UpdateObject.Clone();
          break;
        case TypeOneofCase.UpdatePosition:
          UpdatePosition = other.UpdatePosition.Clone();
          break;
        case TypeOneofCase.UpdateRotation:
          UpdateRotation = other.UpdateRotation.Clone();
          break;
        case TypeOneofCase.DestroyObject:
          DestroyObject = other.DestroyObject.Clone();
          break;
        case TypeOneofCase.UpdateParameters:
          UpdateParameters = other.UpdateParameters.Clone();
          break;
        case TypeOneofCase.Armageddon:
          Armageddon = other.Armageddon.Clone();
          break;
        case TypeOneofCase.Authentication:
          Authentication = other.Authentication.Clone();
          break;
        case TypeOneofCase.CreatePlayer:
          CreatePlayer = other.CreatePlayer.Clone();
          break;
        case TypeOneofCase.UpdateSpaceRequest:
          UpdateSpaceRequest = other.UpdateSpaceRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::Erutan.Metadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "update_object" field.</summary>
    public const int UpdateObjectFieldNumber = 2;
    /// <summary>
    /// General physical objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.UpdateObjectPacket UpdateObject {
      get { return typeCase_ == TypeOneofCase.UpdateObject ? (global::Erutan.Packet.Types.UpdateObjectPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateObject;
      }
    }

    /// <summary>Field number for the "update_position" field.</summary>
    public const int UpdatePositionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.UpdatePositionPacket UpdatePosition {
      get { return typeCase_ == TypeOneofCase.UpdatePosition ? (global::Erutan.Packet.Types.UpdatePositionPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdatePosition;
      }
    }

    /// <summary>Field number for the "update_rotation" field.</summary>
    public const int UpdateRotationFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.UpdateRotationPacket UpdateRotation {
      get { return typeCase_ == TypeOneofCase.UpdateRotation ? (global::Erutan.Packet.Types.UpdateRotationPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateRotation;
      }
    }

    /// <summary>Field number for the "destroy_object" field.</summary>
    public const int DestroyObjectFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.DestroyObjectPacket DestroyObject {
      get { return typeCase_ == TypeOneofCase.DestroyObject ? (global::Erutan.Packet.Types.DestroyObjectPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DestroyObject;
      }
    }

    /// <summary>Field number for the "update_parameters" field.</summary>
    public const int UpdateParametersFieldNumber = 6;
    /// <summary>
    /// Server general
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.UpdateParametersPacket UpdateParameters {
      get { return typeCase_ == TypeOneofCase.UpdateParameters ? (global::Erutan.Packet.Types.UpdateParametersPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateParameters;
      }
    }

    /// <summary>Field number for the "armageddon" field.</summary>
    public const int ArmageddonFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.ArmageddonPacket Armageddon {
      get { return typeCase_ == TypeOneofCase.Armageddon ? (global::Erutan.Packet.Types.ArmageddonPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Armageddon;
      }
    }

    /// <summary>Field number for the "authentication" field.</summary>
    public const int AuthenticationFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.AuthenticationPacket Authentication {
      get { return typeCase_ == TypeOneofCase.Authentication ? (global::Erutan.Packet.Types.AuthenticationPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Authentication;
      }
    }

    /// <summary>Field number for the "create_player" field.</summary>
    public const int CreatePlayerFieldNumber = 9;
    /// <summary>
    /// Player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.CreatePlayerPacket CreatePlayer {
      get { return typeCase_ == TypeOneofCase.CreatePlayer ? (global::Erutan.Packet.Types.CreatePlayerPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CreatePlayer;
      }
    }

    /// <summary>Field number for the "update_space_request" field.</summary>
    public const int UpdateSpaceRequestFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Erutan.Packet.Types.UpdateSpaceRequestPacket UpdateSpaceRequest {
      get { return typeCase_ == TypeOneofCase.UpdateSpaceRequest ? (global::Erutan.Packet.Types.UpdateSpaceRequestPacket) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UpdateSpaceRequest;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      UpdateObject = 2,
      UpdatePosition = 3,
      UpdateRotation = 4,
      DestroyObject = 5,
      UpdateParameters = 6,
      Armageddon = 7,
      Authentication = 8,
      CreatePlayer = 9,
      UpdateSpaceRequest = 10,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(UpdateObject, other.UpdateObject)) return false;
      if (!object.Equals(UpdatePosition, other.UpdatePosition)) return false;
      if (!object.Equals(UpdateRotation, other.UpdateRotation)) return false;
      if (!object.Equals(DestroyObject, other.DestroyObject)) return false;
      if (!object.Equals(UpdateParameters, other.UpdateParameters)) return false;
      if (!object.Equals(Armageddon, other.Armageddon)) return false;
      if (!object.Equals(Authentication, other.Authentication)) return false;
      if (!object.Equals(CreatePlayer, other.CreatePlayer)) return false;
      if (!object.Equals(UpdateSpaceRequest, other.UpdateSpaceRequest)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateObject) hash ^= UpdateObject.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdatePosition) hash ^= UpdatePosition.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateRotation) hash ^= UpdateRotation.GetHashCode();
      if (typeCase_ == TypeOneofCase.DestroyObject) hash ^= DestroyObject.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateParameters) hash ^= UpdateParameters.GetHashCode();
      if (typeCase_ == TypeOneofCase.Armageddon) hash ^= Armageddon.GetHashCode();
      if (typeCase_ == TypeOneofCase.Authentication) hash ^= Authentication.GetHashCode();
      if (typeCase_ == TypeOneofCase.CreatePlayer) hash ^= CreatePlayer.GetHashCode();
      if (typeCase_ == TypeOneofCase.UpdateSpaceRequest) hash ^= UpdateSpaceRequest.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (typeCase_ == TypeOneofCase.UpdateObject) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateObject);
      }
      if (typeCase_ == TypeOneofCase.UpdatePosition) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatePosition);
      }
      if (typeCase_ == TypeOneofCase.UpdateRotation) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateRotation);
      }
      if (typeCase_ == TypeOneofCase.DestroyObject) {
        output.WriteRawTag(42);
        output.WriteMessage(DestroyObject);
      }
      if (typeCase_ == TypeOneofCase.UpdateParameters) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateParameters);
      }
      if (typeCase_ == TypeOneofCase.Armageddon) {
        output.WriteRawTag(58);
        output.WriteMessage(Armageddon);
      }
      if (typeCase_ == TypeOneofCase.Authentication) {
        output.WriteRawTag(66);
        output.WriteMessage(Authentication);
      }
      if (typeCase_ == TypeOneofCase.CreatePlayer) {
        output.WriteRawTag(74);
        output.WriteMessage(CreatePlayer);
      }
      if (typeCase_ == TypeOneofCase.UpdateSpaceRequest) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateSpaceRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (typeCase_ == TypeOneofCase.UpdateObject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateObject);
      }
      if (typeCase_ == TypeOneofCase.UpdatePosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePosition);
      }
      if (typeCase_ == TypeOneofCase.UpdateRotation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateRotation);
      }
      if (typeCase_ == TypeOneofCase.DestroyObject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyObject);
      }
      if (typeCase_ == TypeOneofCase.UpdateParameters) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateParameters);
      }
      if (typeCase_ == TypeOneofCase.Armageddon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Armageddon);
      }
      if (typeCase_ == TypeOneofCase.Authentication) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Authentication);
      }
      if (typeCase_ == TypeOneofCase.CreatePlayer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatePlayer);
      }
      if (typeCase_ == TypeOneofCase.UpdateSpaceRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateSpaceRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Erutan.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.UpdateObject:
          if (UpdateObject == null) {
            UpdateObject = new global::Erutan.Packet.Types.UpdateObjectPacket();
          }
          UpdateObject.MergeFrom(other.UpdateObject);
          break;
        case TypeOneofCase.UpdatePosition:
          if (UpdatePosition == null) {
            UpdatePosition = new global::Erutan.Packet.Types.UpdatePositionPacket();
          }
          UpdatePosition.MergeFrom(other.UpdatePosition);
          break;
        case TypeOneofCase.UpdateRotation:
          if (UpdateRotation == null) {
            UpdateRotation = new global::Erutan.Packet.Types.UpdateRotationPacket();
          }
          UpdateRotation.MergeFrom(other.UpdateRotation);
          break;
        case TypeOneofCase.DestroyObject:
          if (DestroyObject == null) {
            DestroyObject = new global::Erutan.Packet.Types.DestroyObjectPacket();
          }
          DestroyObject.MergeFrom(other.DestroyObject);
          break;
        case TypeOneofCase.UpdateParameters:
          if (UpdateParameters == null) {
            UpdateParameters = new global::Erutan.Packet.Types.UpdateParametersPacket();
          }
          UpdateParameters.MergeFrom(other.UpdateParameters);
          break;
        case TypeOneofCase.Armageddon:
          if (Armageddon == null) {
            Armageddon = new global::Erutan.Packet.Types.ArmageddonPacket();
          }
          Armageddon.MergeFrom(other.Armageddon);
          break;
        case TypeOneofCase.Authentication:
          if (Authentication == null) {
            Authentication = new global::Erutan.Packet.Types.AuthenticationPacket();
          }
          Authentication.MergeFrom(other.Authentication);
          break;
        case TypeOneofCase.CreatePlayer:
          if (CreatePlayer == null) {
            CreatePlayer = new global::Erutan.Packet.Types.CreatePlayerPacket();
          }
          CreatePlayer.MergeFrom(other.CreatePlayer);
          break;
        case TypeOneofCase.UpdateSpaceRequest:
          if (UpdateSpaceRequest == null) {
            UpdateSpaceRequest = new global::Erutan.Packet.Types.UpdateSpaceRequestPacket();
          }
          UpdateSpaceRequest.MergeFrom(other.UpdateSpaceRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::Erutan.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            global::Erutan.Packet.Types.UpdateObjectPacket subBuilder = new global::Erutan.Packet.Types.UpdateObjectPacket();
            if (typeCase_ == TypeOneofCase.UpdateObject) {
              subBuilder.MergeFrom(UpdateObject);
            }
            input.ReadMessage(subBuilder);
            UpdateObject = subBuilder;
            break;
          }
          case 26: {
            global::Erutan.Packet.Types.UpdatePositionPacket subBuilder = new global::Erutan.Packet.Types.UpdatePositionPacket();
            if (typeCase_ == TypeOneofCase.UpdatePosition) {
              subBuilder.MergeFrom(UpdatePosition);
            }
            input.ReadMessage(subBuilder);
            UpdatePosition = subBuilder;
            break;
          }
          case 34: {
            global::Erutan.Packet.Types.UpdateRotationPacket subBuilder = new global::Erutan.Packet.Types.UpdateRotationPacket();
            if (typeCase_ == TypeOneofCase.UpdateRotation) {
              subBuilder.MergeFrom(UpdateRotation);
            }
            input.ReadMessage(subBuilder);
            UpdateRotation = subBuilder;
            break;
          }
          case 42: {
            global::Erutan.Packet.Types.DestroyObjectPacket subBuilder = new global::Erutan.Packet.Types.DestroyObjectPacket();
            if (typeCase_ == TypeOneofCase.DestroyObject) {
              subBuilder.MergeFrom(DestroyObject);
            }
            input.ReadMessage(subBuilder);
            DestroyObject = subBuilder;
            break;
          }
          case 50: {
            global::Erutan.Packet.Types.UpdateParametersPacket subBuilder = new global::Erutan.Packet.Types.UpdateParametersPacket();
            if (typeCase_ == TypeOneofCase.UpdateParameters) {
              subBuilder.MergeFrom(UpdateParameters);
            }
            input.ReadMessage(subBuilder);
            UpdateParameters = subBuilder;
            break;
          }
          case 58: {
            global::Erutan.Packet.Types.ArmageddonPacket subBuilder = new global::Erutan.Packet.Types.ArmageddonPacket();
            if (typeCase_ == TypeOneofCase.Armageddon) {
              subBuilder.MergeFrom(Armageddon);
            }
            input.ReadMessage(subBuilder);
            Armageddon = subBuilder;
            break;
          }
          case 66: {
            global::Erutan.Packet.Types.AuthenticationPacket subBuilder = new global::Erutan.Packet.Types.AuthenticationPacket();
            if (typeCase_ == TypeOneofCase.Authentication) {
              subBuilder.MergeFrom(Authentication);
            }
            input.ReadMessage(subBuilder);
            Authentication = subBuilder;
            break;
          }
          case 74: {
            global::Erutan.Packet.Types.CreatePlayerPacket subBuilder = new global::Erutan.Packet.Types.CreatePlayerPacket();
            if (typeCase_ == TypeOneofCase.CreatePlayer) {
              subBuilder.MergeFrom(CreatePlayer);
            }
            input.ReadMessage(subBuilder);
            CreatePlayer = subBuilder;
            break;
          }
          case 82: {
            global::Erutan.Packet.Types.UpdateSpaceRequestPacket subBuilder = new global::Erutan.Packet.Types.UpdateSpaceRequestPacket();
            if (typeCase_ == TypeOneofCase.UpdateSpaceRequest) {
              subBuilder.MergeFrom(UpdateSpaceRequest);
            }
            input.ReadMessage(subBuilder);
            UpdateSpaceRequest = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Packet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UpdateObjectPacket : pb::IMessage<UpdateObjectPacket> {
        private static readonly pb::MessageParser<UpdateObjectPacket> _parser = new pb::MessageParser<UpdateObjectPacket>(() => new UpdateObjectPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateObjectPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateObjectPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateObjectPacket(UpdateObjectPacket other) : this() {
          objectId_ = other.objectId_;
          components_ = other.components_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateObjectPacket Clone() {
          return new UpdateObjectPacket(this);
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private ulong objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "components" field.</summary>
        public const int ComponentsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Erutan.Component> _repeated_components_codec
            = pb::FieldCodec.ForMessage(18, global::Erutan.Component.Parser);
        private readonly pbc::RepeatedField<global::Erutan.Component> components_ = new pbc::RepeatedField<global::Erutan.Component>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Erutan.Component> Components {
          get { return components_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateObjectPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateObjectPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectId != other.ObjectId) return false;
          if(!components_.Equals(other.components_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ObjectId != 0UL) hash ^= ObjectId.GetHashCode();
          hash ^= components_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ObjectId);
          }
          components_.WriteTo(output, _repeated_components_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ObjectId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
          }
          size += components_.CalculateSize(_repeated_components_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateObjectPacket other) {
          if (other == null) {
            return;
          }
          if (other.ObjectId != 0UL) {
            ObjectId = other.ObjectId;
          }
          components_.Add(other.components_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ObjectId = input.ReadUInt64();
                break;
              }
              case 18: {
                components_.AddEntriesFrom(input, _repeated_components_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdatePositionPacket : pb::IMessage<UpdatePositionPacket> {
        private static readonly pb::MessageParser<UpdatePositionPacket> _parser = new pb::MessageParser<UpdatePositionPacket>(() => new UpdatePositionPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdatePositionPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdatePositionPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdatePositionPacket(UpdatePositionPacket other) : this() {
          objectId_ = other.objectId_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdatePositionPacket Clone() {
          return new UpdatePositionPacket(this);
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private ulong objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private global::Protometry.Vector3 position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Vector3 Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdatePositionPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdatePositionPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectId != other.ObjectId) return false;
          if (!object.Equals(Position, other.Position)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ObjectId != 0UL) hash ^= ObjectId.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ObjectId);
          }
          if (position_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ObjectId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdatePositionPacket other) {
          if (other == null) {
            return;
          }
          if (other.ObjectId != 0UL) {
            ObjectId = other.ObjectId;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              Position = new global::Protometry.Vector3();
            }
            Position.MergeFrom(other.Position);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ObjectId = input.ReadUInt64();
                break;
              }
              case 18: {
                if (position_ == null) {
                  Position = new global::Protometry.Vector3();
                }
                input.ReadMessage(Position);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateRotationPacket : pb::IMessage<UpdateRotationPacket> {
        private static readonly pb::MessageParser<UpdateRotationPacket> _parser = new pb::MessageParser<UpdateRotationPacket>(() => new UpdateRotationPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateRotationPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateRotationPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateRotationPacket(UpdateRotationPacket other) : this() {
          objectId_ = other.objectId_;
          rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateRotationPacket Clone() {
          return new UpdateRotationPacket(this);
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private ulong objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 2;
        private global::Protometry.Quaternion rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Quaternion Rotation {
          get { return rotation_; }
          set {
            rotation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateRotationPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateRotationPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectId != other.ObjectId) return false;
          if (!object.Equals(Rotation, other.Rotation)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ObjectId != 0UL) hash ^= ObjectId.GetHashCode();
          if (rotation_ != null) hash ^= Rotation.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ObjectId);
          }
          if (rotation_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Rotation);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ObjectId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
          }
          if (rotation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateRotationPacket other) {
          if (other == null) {
            return;
          }
          if (other.ObjectId != 0UL) {
            ObjectId = other.ObjectId;
          }
          if (other.rotation_ != null) {
            if (rotation_ == null) {
              Rotation = new global::Protometry.Quaternion();
            }
            Rotation.MergeFrom(other.Rotation);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ObjectId = input.ReadUInt64();
                break;
              }
              case 18: {
                if (rotation_ == null) {
                  Rotation = new global::Protometry.Quaternion();
                }
                input.ReadMessage(Rotation);
                break;
              }
            }
          }
        }

      }

      public sealed partial class DestroyObjectPacket : pb::IMessage<DestroyObjectPacket> {
        private static readonly pb::MessageParser<DestroyObjectPacket> _parser = new pb::MessageParser<DestroyObjectPacket>(() => new DestroyObjectPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestroyObjectPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyObjectPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyObjectPacket(DestroyObjectPacket other) : this() {
          objectId_ = other.objectId_;
          region_ = other.region_ != null ? other.region_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyObjectPacket Clone() {
          return new DestroyObjectPacket(this);
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private ulong objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 2;
        private global::Protometry.Box region_;
        /// <summary>
        /// It's faster to search by region
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protometry.Box Region {
          get { return region_; }
          set {
            region_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestroyObjectPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestroyObjectPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectId != other.ObjectId) return false;
          if (!object.Equals(Region, other.Region)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ObjectId != 0UL) hash ^= ObjectId.GetHashCode();
          if (region_ != null) hash ^= Region.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ObjectId);
          }
          if (region_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Region);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ObjectId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
          }
          if (region_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestroyObjectPacket other) {
          if (other == null) {
            return;
          }
          if (other.ObjectId != 0UL) {
            ObjectId = other.ObjectId;
          }
          if (other.region_ != null) {
            if (region_ == null) {
              Region = new global::Protometry.Box();
            }
            Region.MergeFrom(other.Region);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ObjectId = input.ReadUInt64();
                break;
              }
              case 18: {
                if (region_ == null) {
                  Region = new global::Protometry.Box();
                }
                input.ReadMessage(Region);
                break;
              }
            }
          }
        }

      }

      public sealed partial class UpdateParametersPacket : pb::IMessage<UpdateParametersPacket> {
        private static readonly pb::MessageParser<UpdateParametersPacket> _parser = new pb::MessageParser<UpdateParametersPacket>(() => new UpdateParametersPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateParametersPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParametersPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParametersPacket(UpdateParametersPacket other) : this() {
          parameters_ = other.parameters_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateParametersPacket Clone() {
          return new UpdateParametersPacket(this);
        }

        /// <summary>Field number for the "parameters" field.</summary>
        public const int ParametersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter> _repeated_parameters_codec
            = pb::FieldCodec.ForMessage(10, global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter.Parser);
        private readonly pbc::RepeatedField<global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter> parameters_ = new pbc::RepeatedField<global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Erutan.Packet.Types.UpdateParametersPacket.Types.Parameter> Parameters {
          get { return parameters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateParametersPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateParametersPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!parameters_.Equals(other.parameters_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= parameters_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          parameters_.WriteTo(output, _repeated_parameters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += parameters_.CalculateSize(_repeated_parameters_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateParametersPacket other) {
          if (other == null) {
            return;
          }
          parameters_.Add(other.parameters_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the UpdateParametersPacket message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Parameter : pb::IMessage<Parameter> {
            private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Erutan.Packet.Types.UpdateParametersPacket.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Parameter() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Parameter(Parameter other) : this() {
              switch (other.TypeCase) {
                case TypeOneofCase.TimeScale:
                  TimeScale = other.TimeScale;
                  break;
                case TypeOneofCase.Debug:
                  Debug = other.Debug;
                  break;
                case TypeOneofCase.CullingArea:
                  CullingArea = other.CullingArea.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Parameter Clone() {
              return new Parameter(this);
            }

            /// <summary>Field number for the "time_scale" field.</summary>
            public const int TimeScaleFieldNumber = 1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double TimeScale {
              get { return typeCase_ == TypeOneofCase.TimeScale ? (double) type_ : 0D; }
              set {
                type_ = value;
                typeCase_ = TypeOneofCase.TimeScale;
              }
            }

            /// <summary>Field number for the "debug" field.</summary>
            public const int DebugFieldNumber = 2;
            /// <summary>
            /// Whether or not synchronizing debug stuff
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Debug {
              get { return typeCase_ == TypeOneofCase.Debug ? (bool) type_ : false; }
              set {
                type_ = value;
                typeCase_ = TypeOneofCase.Debug;
              }
            }

            /// <summary>Field number for the "culling_area" field.</summary>
            public const int CullingAreaFieldNumber = 3;
            /// <summary>
            /// TODO: client area that he wants to be synchronized on, culling-like (obvsly to improve client-side perf)
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Protometry.Box CullingArea {
              get { return typeCase_ == TypeOneofCase.CullingArea ? (global::Protometry.Box) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CullingArea;
              }
            }

            private object type_;
            /// <summary>Enum of possible cases for the "type" oneof.</summary>
            public enum TypeOneofCase {
              None = 0,
              TimeScale = 1,
              Debug = 2,
              CullingArea = 3,
            }
            private TypeOneofCase typeCase_ = TypeOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeOneofCase TypeCase {
              get { return typeCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              typeCase_ = TypeOneofCase.None;
              type_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Parameter);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Parameter other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeScale, other.TimeScale)) return false;
              if (Debug != other.Debug) return false;
              if (!object.Equals(CullingArea, other.CullingArea)) return false;
              if (TypeCase != other.TypeCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (typeCase_ == TypeOneofCase.TimeScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeScale);
              if (typeCase_ == TypeOneofCase.Debug) hash ^= Debug.GetHashCode();
              if (typeCase_ == TypeOneofCase.CullingArea) hash ^= CullingArea.GetHashCode();
              hash ^= (int) typeCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (typeCase_ == TypeOneofCase.TimeScale) {
                output.WriteRawTag(9);
                output.WriteDouble(TimeScale);
              }
              if (typeCase_ == TypeOneofCase.Debug) {
                output.WriteRawTag(16);
                output.WriteBool(Debug);
              }
              if (typeCase_ == TypeOneofCase.CullingArea) {
                output.WriteRawTag(26);
                output.WriteMessage(CullingArea);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (typeCase_ == TypeOneofCase.TimeScale) {
                size += 1 + 8;
              }
              if (typeCase_ == TypeOneofCase.Debug) {
                size += 1 + 1;
              }
              if (typeCase_ == TypeOneofCase.CullingArea) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CullingArea);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Parameter other) {
              if (other == null) {
                return;
              }
              switch (other.TypeCase) {
                case TypeOneofCase.TimeScale:
                  TimeScale = other.TimeScale;
                  break;
                case TypeOneofCase.Debug:
                  Debug = other.Debug;
                  break;
                case TypeOneofCase.CullingArea:
                  if (CullingArea == null) {
                    CullingArea = new global::Protometry.Box();
                  }
                  CullingArea.MergeFrom(other.CullingArea);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 9: {
                    TimeScale = input.ReadDouble();
                    break;
                  }
                  case 16: {
                    Debug = input.ReadBool();
                    break;
                  }
                  case 26: {
                    global::Protometry.Box subBuilder = new global::Protometry.Box();
                    if (typeCase_ == TypeOneofCase.CullingArea) {
                      subBuilder.MergeFrom(CullingArea);
                    }
                    input.ReadMessage(subBuilder);
                    CullingArea = subBuilder;
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class ArmageddonPacket : pb::IMessage<ArmageddonPacket> {
        private static readonly pb::MessageParser<ArmageddonPacket> _parser = new pb::MessageParser<ArmageddonPacket>(() => new ArmageddonPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ArmageddonPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArmageddonPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArmageddonPacket(ArmageddonPacket other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ArmageddonPacket Clone() {
          return new ArmageddonPacket(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ArmageddonPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ArmageddonPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ArmageddonPacket other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class AuthenticationPacket : pb::IMessage<AuthenticationPacket> {
        private static readonly pb::MessageParser<AuthenticationPacket> _parser = new pb::MessageParser<AuthenticationPacket>(() => new AuthenticationPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthenticationPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticationPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticationPacket(AuthenticationPacket other) : this() {
          clientToken_ = other.clientToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthenticationPacket Clone() {
          return new AuthenticationPacket(this);
        }

        /// <summary>Field number for the "client_token" field.</summary>
        public const int ClientTokenFieldNumber = 1;
        private string clientToken_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientToken {
          get { return clientToken_; }
          set {
            clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AuthenticationPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthenticationPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClientToken != other.ClientToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ClientToken.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ClientToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ClientToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthenticationPacket other) {
          if (other == null) {
            return;
          }
          if (other.ClientToken.Length != 0) {
            ClientToken = other.ClientToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ClientToken = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CreatePlayerPacket : pb::IMessage<CreatePlayerPacket> {
        private static readonly pb::MessageParser<CreatePlayerPacket> _parser = new pb::MessageParser<CreatePlayerPacket>(() => new CreatePlayerPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreatePlayerPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreatePlayerPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreatePlayerPacket(CreatePlayerPacket other) : this() {
          objectId_ = other.objectId_;
          components_ = other.components_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreatePlayerPacket Clone() {
          return new CreatePlayerPacket(this);
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private ulong objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "components" field.</summary>
        public const int ComponentsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Erutan.Component> _repeated_components_codec
            = pb::FieldCodec.ForMessage(18, global::Erutan.Component.Parser);
        private readonly pbc::RepeatedField<global::Erutan.Component> components_ = new pbc::RepeatedField<global::Erutan.Component>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Erutan.Component> Components {
          get { return components_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CreatePlayerPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreatePlayerPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectId != other.ObjectId) return false;
          if(!components_.Equals(other.components_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ObjectId != 0UL) hash ^= ObjectId.GetHashCode();
          hash ^= components_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ObjectId);
          }
          components_.WriteTo(output, _repeated_components_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ObjectId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
          }
          size += components_.CalculateSize(_repeated_components_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreatePlayerPacket other) {
          if (other == null) {
            return;
          }
          if (other.ObjectId != 0UL) {
            ObjectId = other.ObjectId;
          }
          components_.Add(other.components_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ObjectId = input.ReadUInt64();
                break;
              }
              case 18: {
                components_.AddEntriesFrom(input, _repeated_components_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Client request a space update of an object, server check physics etc.
      /// </summary>
      public sealed partial class UpdateSpaceRequestPacket : pb::IMessage<UpdateSpaceRequestPacket> {
        private static readonly pb::MessageParser<UpdateSpaceRequestPacket> _parser = new pb::MessageParser<UpdateSpaceRequestPacket>(() => new UpdateSpaceRequestPacket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateSpaceRequestPacket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Erutan.Packet.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateSpaceRequestPacket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateSpaceRequestPacket(UpdateSpaceRequestPacket other) : this() {
          objectId_ = other.objectId_;
          actualSpace_ = other.actualSpace_ != null ? other.actualSpace_.Clone() : null;
          newSpace_ = other.newSpace_ != null ? other.newSpace_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateSpaceRequestPacket Clone() {
          return new UpdateSpaceRequestPacket(this);
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 1;
        private ulong objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "actualSpace" field.</summary>
        public const int ActualSpaceFieldNumber = 2;
        private global::Erutan.Component.Types.SpaceComponent actualSpace_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Erutan.Component.Types.SpaceComponent ActualSpace {
          get { return actualSpace_; }
          set {
            actualSpace_ = value;
          }
        }

        /// <summary>Field number for the "newSpace" field.</summary>
        public const int NewSpaceFieldNumber = 3;
        private global::Erutan.Component.Types.SpaceComponent newSpace_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Erutan.Component.Types.SpaceComponent NewSpace {
          get { return newSpace_; }
          set {
            newSpace_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UpdateSpaceRequestPacket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateSpaceRequestPacket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectId != other.ObjectId) return false;
          if (!object.Equals(ActualSpace, other.ActualSpace)) return false;
          if (!object.Equals(NewSpace, other.NewSpace)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ObjectId != 0UL) hash ^= ObjectId.GetHashCode();
          if (actualSpace_ != null) hash ^= ActualSpace.GetHashCode();
          if (newSpace_ != null) hash ^= NewSpace.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ObjectId);
          }
          if (actualSpace_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ActualSpace);
          }
          if (newSpace_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(NewSpace);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ObjectId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
          }
          if (actualSpace_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActualSpace);
          }
          if (newSpace_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewSpace);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateSpaceRequestPacket other) {
          if (other == null) {
            return;
          }
          if (other.ObjectId != 0UL) {
            ObjectId = other.ObjectId;
          }
          if (other.actualSpace_ != null) {
            if (actualSpace_ == null) {
              ActualSpace = new global::Erutan.Component.Types.SpaceComponent();
            }
            ActualSpace.MergeFrom(other.ActualSpace);
          }
          if (other.newSpace_ != null) {
            if (newSpace_ == null) {
              NewSpace = new global::Erutan.Component.Types.SpaceComponent();
            }
            NewSpace.MergeFrom(other.NewSpace);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ObjectId = input.ReadUInt64();
                break;
              }
              case 18: {
                if (actualSpace_ == null) {
                  ActualSpace = new global::Erutan.Component.Types.SpaceComponent();
                }
                input.ReadMessage(ActualSpace);
                break;
              }
              case 26: {
                if (newSpace_ == null) {
                  NewSpace = new global::Erutan.Component.Types.SpaceComponent();
                }
                input.ReadMessage(NewSpace);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
